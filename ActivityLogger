# Activity Logger
# Rob Miles and Keith Dye
# Humber Care Tech Challenge 2019

import sensor, image, pyb, os, time

TRIGGER_THRESHOLD = 5

BG_UPDATE_FRAMES = 50 # How many frames before blending.
BG_UPDATE_BLEND = 128 # How much to blend by... ([0-256]==[0.0-1.0]).

class motionRecord:
    def print():
        print("Motion record")



class motionDetector:

    def setup(self):
        print("Sensor setup")
        sensor.reset() # Initialize the camera sensor.
        sensor.set_pixformat(sensor.RGB565) # or sensor.RGB565
        sensor.set_framesize(sensor.QVGA) # or sensor.QQVGA (or others)
        sensor.skip_frames(time = 2000) # Let new settings take affect.
        sensor.set_auto_whitebal(False) # Turn off white balance.
        self.clock = time.clock() # Tracks FPS.
        sensor.reset()
        sensor.set_pixformat(sensor.RGB565)
        sensor.set_framesize(sensor.QVGA)
        sensor.skip_frames(time = 2000)

        # Take from the main frame buffer's RAM to allocate a second frame buffer.
        # There's a lot more RAM in the frame buffer than in the MicroPython heap.
        # However, after doing this you have a lot less RAM for some algorithms...
        # So, be aware that it's a lot easier to get out of RAM issues now. However,
        # frame differencing doesn't use a lot of the extra space in the frame buffer.
        # But, things like AprilTags do and won't work if you do this...
        self.extra_fb = sensor.alloc_extra_fb(sensor.width(), sensor.height(), sensor.RGB565)

    def clear_fb(self):
        print("Save background image...")
        # sensor.skip_frames(time = 2000) # Give the user time to get ready.
        self.extra_fb.replace(sensor.snapshot())

    def get_motion(self):
        img = sensor.snapshot() # Take a picture and return the image.
        frame_count += 1
        if (frame_count > BG_UPDATE_FRAMES):
            frame_count = 0
            # Blend in new frame. We're doing 256-alpha here because we want to
            # blend the new frame into the backgound. Not the background into the
            # new frame which would be just alpha. Blend replaces each pixel by
            # ((NEW*(alpha))+(OLD*(256-alpha)))/256. So, a low alpha results in
            # low blending of the new image while a high alpha results in high
            # blending of the new image. We need to reverse that for this update.
            img.blend(extra_fb, alpha=(256-BG_UPDATE_BLEND))
            extra_fb.replace(img)



mot = motionDetector()
mot.setup()
mot.clear_fb()


